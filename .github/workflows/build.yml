name: Build

on:
  push:
    branches:
      - master

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Create draft release
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            const release = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0],
              target_commitish: context.sha,
              draft: true,
              prerelease: true,
            });

            fs.writeFileSync('release.json', JSON.stringify({
              id: release.data.id,
              upload_url: release.data.upload_url,
            }));

      - name: Upload release.json
        uses: actions/upload-artifact@v1
        with:
          name: release.json
          path: release.json

  build:
    name: ${{ matrix.wheel }} (${{matrix.test}})
    runs-on: ubuntu-latest
    needs: release
    container:
      image: debian:10

    strategy:
      matrix:
        wheel:
          - demo
          - demo2
        test:
          - 1
          - 2
          - 3
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Execute ${{ matrix.wheel }}/build.sh
        run: exec ${{ matrix.wheel }}/build.sh

      - name: Download release.json
        uses: actions/download-artifact@v1
        with:
          name: release.json

      - name: Upload ${{ matrix.wheel }}-${{ matrix.test }}.txt
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            const release = JSON.parse(fs.readFileSync('release.json'), 'utf8');
            const path = process.env.ASSET_PATH;
            const name = process.env.ASSET_NAME;
            const data = fs.readFileSync(path);

            await github.repos.uploadReleaseAsset({
              url: release.upload_url,
              headers: {
                'content-type': 'text/plain',
                'content-length': data.length,
              },
              name,
              data,
            });

  publish:
    name: Publish
    runs-on: ubuntu-latest

    steps:
      - name: Download release.json
        uses: actions/download-artifact@v1
        with:
          name: release.json

      - name: Publish release
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            const release = JSON.parse(fs.readFileSync('release.json'), 'utf8');

            await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              draft: false,
            });
